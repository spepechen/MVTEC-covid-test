# for time series, shuffle before splitting
idx_shuffled_t <- sample(nrow(usa_tuned))
usa_shuffled_t <- usa_tuned[idx_shuffled_t,]
training.samples.t <- usa_shuffled_t$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data.tuned  <- usa[training.samples.t, ]
test.data.tuned <- usa[-training.samples.t, ]
multiple.regression.tuned <- lm(new_deaths_smoothed ~
yest_new_deaths_smoothed
+ yest_icu_patients_per_million,
data = usa_tuned)
summary(multiple.regression.tuned)
multi_predictions_tuned <- multiple.regression %>% predict(test.data.tuned)
# ‚úÖÔ∏è validation
# http://www.sthda.com/english/articles/40-regression-analysis/162-nonlinear-regression-essentials-in-r-polynomial-and-spline-regression-models/
data.frame(
RMSE = RMSE(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed),
R2 = R2(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed)
)
data.frame(
RMSE = RMSE(multi_predictions, test.data$new_cases_smoothed),
R2 = R2(multi_predictions, test.data$new_cases_smoothed)
)
test.data
#+ message=FALSE
library(dplyr)
library(tidyverse)
library(caret)
#' TODO
#' residual analysis
#' different currency
# load(file="/Users/spechen/Desktop/MVTEC/mid-term/MVTEC-covid-test/output/joined_data_by_isocode.RData")
#' ## Preprocessing
df <- read.csv("./data/owid-covid-data-new.csv",header=T)
df$date <- as.Date(df$date, format='%Y-%m-%d')
usa <- df %>%
filter(iso_code == 'USA') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
# excluding outliers after residul analysis
# #57,58 Thanksgiving
# #64, #65, #66 Dec 3-5
# 85 Chirstmas eve, 86, Christmas, 87 the day after Christmas
usa_tuned <- usa[-c(85, 86, 87, 64, 65, 66, 57, 58),]
hist(usa$new_deaths_smoothed)
usa %>%
select(date, new_deaths, yest_new_deaths)
#' ## Data partitioning
#' split training and testing data set
set.seed(123)
# for time series, shuffle before splitting
idx_shuffled <- sample(nrow(usa))
usa_shuffled <- usa[idx_shuffled,]
training.samples <- usa_shuffled$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- usa[training.samples, ]
test.data <- usa[-training.samples, ]
# usa_tuned
# for time series, shuffle before splitting
idx_shuffled_t <- sample(nrow(usa_tuned))
usa_shuffled_t <- usa_tuned[idx_shuffled_t,]
training.samples.t <- usa_shuffled_t$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data.tuned  <- usa[training.samples.t, ]
test.data.tuned <- usa[-training.samples.t, ]
multiple.regression <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ stringency_index,
data = train.data)
summary(multiple.regression)
multi_predictions <- multiple.regression %>% predict(test.data)
# ‚úÖÔ∏è validation
data.frame(
RMSE = RMSE(multi_predictions, test.data$new_cases_smoothed),
R2 = R2(multi_predictions, test.data$new_cases_smoothed)
)
par(mfrow = c(2, 2))
plot(multiple.regression)
multiple.regression.tuned <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ stringency_index,
data = train.data.tuned)
summary(multiple.regression.tuned)
multi_predictions_tuned <- multiple.regression %>% predict(test.data.tuned)
data.frame(
RMSE = RMSE(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed),
R2 = R2(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed)
)
data.frame(
RMSE = RMSE(multi_predictions_tuned, test.data.tuned$new_cases_smoothed),
R2 = R2(multi_predictions_tuned, test.data.tuned$new_cases_smoothed)
)
# üî∫ linearity,  ‚úñ normality
par(mfrow = c(2, 2))
plot(multiple.regression.tuned)
multiple.regression.tuned
usa_tunded_selected <- usa_tuned %>% select(new_cases_smoothed,
yest_new_deaths_smoothed,
yest_new_cases_smoothed,
yest_icu_patients_per_million,
stringency_index)
plot(usa_tunded_selected)
multiple.regression.tuned
summary(multiple.regression.tuned)$coefficients[1]
summary(multiple.regression.tuned)
intercept <- summary(multiple.regression.tuned)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(multiple.regression.tuned)$coefficients[2]
coeff_yest_new_cases_smoothed <- summary(multiple.regression.tuned)$coefficients[3]
coeff_yest_icu_patients_per_million <- summary(multiple.regression.tuned)$coefficients[4]
coeff_stringency_index <- summary(multiple.regression.tuned)$coefficients[5]
coeff_stringency_index
coeff_yest_icu_patients_per_million
usa_tunded_selected <- usa_tuned %>% select(new_cases_smoothed,
yest_new_deaths_smoothed,
yest_new_cases_smoothed,
yest_icu_patients_per_million,
yest_stringency_index)
usa <- df %>%
filter(iso_code == 'USA') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_stringency_index = lag(stringency_index),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
#' ## Data partitioning
#' split training and testing data set
set.seed(123)
# for time series, shuffle before splitting
idx_shuffled <- sample(nrow(usa))
usa_shuffled <- usa[idx_shuffled,]
training.samples <- usa_shuffled$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- usa[training.samples, ]
test.data <- usa[-training.samples, ]
# usa_tuned
# for time series, shuffle before splitting
idx_shuffled_t <- sample(nrow(usa_tuned))
usa_shuffled_t <- usa_tuned[idx_shuffled_t,]
training.samples.t <- usa_shuffled_t$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data.tuned  <- usa[training.samples.t, ]
test.data.tuned <- usa[-training.samples.t, ]
multiple.regression.tuned <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = train.data.tuned)
summary(multiple.regression.tuned)
multi_predictions_tuned <- multiple.regression %>% predict(test.data.tuned)
summary(multiple.regression.tuned)
usa_tunded_selected <- usa_tuned %>% select(new_cases_smoothed,
yest_new_deaths_smoothed,
yest_new_cases_smoothed,
yest_icu_patients_per_million,
yest_stringency_index)
usa_tuned <- usa[-c(85, 86, 87, 64, 65, 66, 57, 58),]
usa_tunded_selected <- usa_tuned %>% select(new_cases_smoothed,
yest_new_deaths_smoothed,
yest_new_cases_smoothed,
yest_icu_patients_per_million,
yest_stringency_index)
plot(usa_tunded_selected)
intercept <- summary(multiple.regression.tuned)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(multiple.regression.tuned)$coefficients[2]
coeff_yest_new_cases_smoothed <- summary(multiple.regression.tuned)$coefficients[3]
coeff_yest_icu_patients_per_million <- summary(multiple.regression.tuned)$coefficients[4]
coeff_yest_stringency_index <- summary(multiple.regression.tuned)$coefficients[5]
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
+ usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
+ usa$yest_stringency_index * coeff_stringency_index
+ intercept
usa$predicted_new_cases_smoothed
usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
usa$yest_new_deaths_smoothed
coeff_yest_new_deaths_smoothed
summary(multiple.regression.tuned)
usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothe
usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
usa$yest_stringency_index * coeff_stringency_index
coeff_stringency_index
summary(multiple.regression.tuned)
coeff_yest_stringency_index
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
+ usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
+ usa$yest_stringency_index * coeff_stringency_index
+ intercept
usa$predicted_new_cases_smoothed
usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
multiple.regression2 <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = train.data)
summary(multiple.regression2)
fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = train.data)
summary(fit)
intercept <- summary(fit)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(fit)$coefficients[2]
coeff_yest_new_cases_smoothed <- summary(fit)$coefficients[3]
coeff_yest_icu_patients_per_million <- summary(fit)$coefficients[4]
coeff_yest_stringency_index <- summary(fit)$coefficients[5]
usa$yest_new_deaths_smoothed
coeff_yest_new_deaths_smoothed
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
+ usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
+ usa$yest_stringency_index * coeff_stringency_index
+ intercept
predicted_new_cases_smoothed
usa$new_cases_smoothed
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
usa$predicted_new_cases_smoothed
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = usa)
summary(fit)
par(mfrow = c(2, 2))
plot(fit)
usa_tuned <- usa[-c(64, 57, 59),]
fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = usa_tuned)
summary(fit)
usa_tuned
.fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = usa_tuned)
summary(.fit)
.fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_icu_patients_per_million
+ yest_stringency_index,
data = usa_tuned)
summary(.fit)
.fit <- lm(new_cases_smoothed ~
yest_new_deaths_smoothed
+ yest_new_cases_smoothed
+ yest_stringency_index,
data = usa_tuned)
summary(.fit)
par(mfrow = c(2, 2))
plot(.fit)
summary(.fit)
intercept <- summary(.fit)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(.fit)$coefficients[2]
coeff_yest_new_cases_smoothed <- summary(.fit)$coefficients[3]
coeff_yest_stringency_index <- summary(.fit)$coefficients[4]
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
+ usa$yest_stringency_index * coeff_stringency_index
+ intercept
usa$predicted_new_cases_smoothed
summary(.fit
summary(.fit)
usa$predicted_new_cases_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
# + usa$yest_new_cases_smoothed * coeff_yest_new_cases_smoothed
# + usa$yest_stringency_index * coeff_stringency_index
+ intercept
usa$predicted_new_cases_smoothed
#+ message=FALSE
library(dplyr)
library(tidyverse)
library(caret)
#' TODO
#' residual analysis
#' different currency
# load(file="/Users/spechen/Desktop/MVTEC/mid-term/MVTEC-covid-test/output/joined_data_by_isocode.RData")
#' ## Preprocessing
df <- read.csv("./data/owid-covid-data-new.csv",header=T)
df$date <- as.Date(df$date, format='%Y-%m-%d')
usa <- df %>%
filter(iso_code == 'USA') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
# excluding outliers after residul analysis
# #57,58 Thanksgiving
# #64, #65, #66 Dec 3-5
# 85 Chirstmas eve, 86, Christmas, 87 the day after Christmas
usa_tuned <- usa[-c(85, 86, 87, 64, 65, 66, 57, 58),]
deaths.model <- lm(new_deaths_smoothed ~ yest_icu_patients_per_million, data = train.data ) # fit the model
summary(deaths.model)
deaths.model <- lm(new_deaths_smoothed ~ yest_icu_patients_per_million, data = train.data ) # fit the model
#+ message=FALSE
library(dplyr)
library(tidyverse)
library(caret)
#' TODO
#' residual analysis
#' different currency
# load(file="/Users/spechen/Desktop/MVTEC/mid-term/MVTEC-covid-test/output/joined_data_by_isocode.RData")
#' ## Preprocessing
df <- read.csv("./data/owid-covid-data-new.csv",header=T)
df$date <- as.Date(df$date, format='%Y-%m-%d')
usa <- df %>%
filter(iso_code == 'USA') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
# excluding outliers after residul analysis
# #57,58 Thanksgiving
# #64, #65, #66 Dec 3-5
# 85 Chirstmas eve, 86, Christmas, 87 the day after Christmas
usa_tuned <- usa[-c(85, 86, 87, 64, 65, 66, 57, 58),]
hist(usa$new_deaths_smoothed)
usa %>%
select(date, new_deaths, yest_new_deaths)
#' ## Data partitioning
#' split training and testing data set
set.seed(222)
# for time series, shuffle before splitting
idx_shuffled <- sample(nrow(usa))
usa_shuffled <- usa[idx_shuffled,]
training.samples <- usa_shuffled$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- usa[training.samples, ]
test.data <- usa[-training.samples, ]
idx_shuffled_t <- sample(nrow(usa_tuned))
usa_shuffled_t <- usa_tuned[idx_shuffled_t,]
training.samples.t <- usa_shuffled_t$new_deaths %>%
createDataPartition(p = 0.8, list = FALSE)
train.data.tuned  <- usa[training.samples.t, ]
test.data.tuned <- usa[-training.samples.t, ]
usa_selected <- usa %>% select(new_cases_smoothed, new_deaths_smoothed, icu_patients_per_million,
new_tests_smoothed_per_thousand, hosp_patients_per_million, stringency_index)
plot(usa_selected)
# a few non linear trends, decided not to use it
usa_selected2 <- usa_sinceMar %>% select(new_cases, new_deaths, icu_patients, new_tests, hosp_patients, stringency_index)
plot(usa_selected2)
#' ### Start with the most obvious trends
# Build the model
deaths.model <- lm(new_deaths_smoothed ~ yest_icu_patients_per_million, data = train.data ) # fit the model
summary(deaths.model)
par(mfrow = c(1, 1))
plot(usa$yest_icu_patients_per_million, usa$new_deaths_smoothed)
abline(deaths.model, col="blue")
par(mfrow = c(2, 2))
plot(deaths.model)
qplot(deaths.model$residuals,
geom = "histogram",
bins = 10) +
labs(title = "Histogram of residuals",
x = "residual")
deaths.model <- lm(new_deaths_smoothed ~ yest_icu_patients_per_million, data = train.data ) # fit the model
summary(deaths.model)
summary(deaths.model)
qplot(deaths.model$residuals,
geom = "histogram",
bins = 10) +
labs(title = "Histogram of residuals",
x = "residual")
plot(deaths.model)
multiple.regression.test <- lm(new_deaths_smoothed ~
yest_new_deaths_smoothed
+ yest_icu_patients_per_million
+ yest_new_cases_smoothed #üö´
+ yest_hosp_patients, #üö´ #drop cuz p value > 0.05
data = train.data)
summary(multiple.regression.test)
summary(multiple.regression.test)
deaths.model <- lm(new_deaths_smoothed ~ yest_icu_patients_per_million, data = train.data ) # fit the model
summary(deaths.model)
par(mfrow = c(1, 1))
plot(usa$yest_icu_patients_per_million, usa$new_deaths_smoothed)
abline(deaths.model, col="blue")
usa$predicted_new_deaths_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
+ intercept
usa$deaths_variance <- usa$predicted_new_deaths_smoothed - usa$new_deaths_smoothed
usa$deaths_variance_pct <- usa$deaths_variance/usa$new_deaths_smoothed
result <- usa %>% select(date, new_deaths_smoothed, predicted_new_deaths_smoothed, deaths_variance, deaths_variance_pct) %>%
mutate(across(deaths_variance_pct, round, 3)) %>%
mutate("deaths_variance_%" = deaths_variance_pct * 100) %>%
mutate(across(deaths_variance, round, 0))
result4plot <- result %>% select(date, new_deaths_smoothed, predicted_new_deaths_smoothed)
long <- reshape2::melt(result4plot, id.vars = "date")
ggplot(long, aes(x = date, y = value,
group = variable, colour = variable)) +
geom_line() +
scale_y_log10()
intercept <- summary(multiple.regression.tuned)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(multiple.regression.tuned)$coefficients[2]
coeff_yest_icu_patients_per_million <- summary(multiple.regression.tuned)$coefficients[3]
usa$predicted_new_deaths_smoothed <- usa$yest_new_deaths_smoothed * coeff_yest_new_deaths_smoothed
+ usa$yest_icu_patients_per_million * coeff_yest_icu_patients_per_million
+ intercept
usa$deaths_variance <- usa$predicted_new_deaths_smoothed - usa$new_deaths_smoothed
usa$deaths_variance_pct <- usa$deaths_variance/usa$new_deaths_smoothed
result <- usa %>% select(date, new_deaths_smoothed, predicted_new_deaths_smoothed, deaths_variance, deaths_variance_pct) %>%
mutate(across(deaths_variance_pct, round, 3)) %>%
mutate("deaths_variance_%" = deaths_variance_pct * 100) %>%
mutate(across(deaths_variance, round, 0))
result4plot <- result %>% select(date, new_deaths_smoothed, predicted_new_deaths_smoothed)
long <- reshape2::melt(result4plot, id.vars = "date")
ggplot(long, aes(x = date, y = value,
group = variable, colour = variable)) +
geom_line() +
scale_y_log10()
long <- reshape2::melt(result4plot, id.vars = "date")
result4plot <- result %>% select(date, new_deaths_smoothed, predicted_new_deaths_smoothed)
intercept <- summary(multiple.regression.tuned)$coefficients[1]
coeff_yest_new_deaths_smoothed <- summary(multiple.regression.tuned)$coefficients[2]
coeff_yest_icu_patients_per_million <- summary(multiple.regression.tuned)$coefficients[3]
multiple.regression.tuned <- lm(new_deaths_smoothed ~
yest_new_deaths_smoothed
+ yest_icu_patients_per_million,
data = usa_tuned)
summary(multiple.regression.tuned)
multi_predictions_tuned <- multiple.regression %>% predict(test.data.tuned)
# ‚úÖÔ∏è validation
# http://www.sthda.com/english/articles/40-regression-analysis/162-nonlinear-regression-essentials-in-r-polynomial-and-spline-regression-models/
data.frame(
RMSE = RMSE(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed),
R2 = R2(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed)
)
multi_predictions_tuned <- multiple.regression %>% predict(test.data.tuned)
multiple.regression.tuned <- lm(new_deaths_smoothed ~
yest_new_deaths_smoothed
+ yest_icu_patients_per_million,
data = usa_tuned)
summary(multiple.regression.tuned)
multi_predictions_tuned <- multiple.regression.tuned %>% predict(test.data.tuned)
data.frame(
RMSE = RMSE(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed),
R2 = R2(multi_predictions_tuned, test.data.tuned$new_deaths_smoothed)
)
par(mfrow = c(2, 2))
plot(multiple.regression.tuned)
usa_tunded_selected <- usa_tuned %>% select(new_deaths_smoothed,
yest_new_deaths_smoothed,
yest_icu_patients_per_million)
plot(usa_tunded_selected)
usa <- df %>%
filter(iso_code == 'ESP') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
usa <- df %>%
filter(iso_code == 'USA') %>%
mutate(yest_new_deaths = lag(new_deaths),
yest_new_cases = lag(new_cases),
yest_icu_patients = lag(icu_patients),
yest_hosp_patients = lag(hosp_patients),
yest_new_cases_smoothed = lag(new_cases_smoothed),
yest_new_deaths_smoothed = lag(new_deaths_smoothed),
yest_icu_patients_per_million = lag(icu_patients_per_million),
yest_hosp_patients_per_million = lag(hosp_patients_per_million),
yest_new_tests_smoothed_per_thousand = lag(new_tests_smoothed_per_thousand)) %>%
filter(date > "2020-09-30") #starts with March
