axis.text.y = element_text(size=5)) +
labs(#title="Gov Type Count",
y="", x="")
plot_groups_oecd
saveWidget(plotly_oecd, file=paste0( getwd(), "MissingValueRateOECD.html"))
groups_oecd <- filtered_joined %>%
filter(Country_Clasification == 'OECD') %>%
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.))) %>%
mutate(text = paste0("iso_code: ", iso_code, "\n", "rate: ", rate, "\n", "column: ", col_name)) # new column: text for tooltip:
plot_groups_oecd <- ggplot(groups_oecd, aes(x= reorder(iso_code, rate), y= reorder(col_name, rate), fill= rate)) +
geom_tile() +
theme(axis.text.x = element_text(size=4, angle = 90),
axis.text.y = element_text(size=5)) +
labs(#title="Gov Type Count",
y="", x="")
plotly_oecd <- ggplotly(plot_groups_oecd, tooltip="text")
saveWidget(plotly_oecd, file=paste0( getwd(), "MissingValueRateOECD.html"))
saveWidget(plotly_oecd, file=paste0( getwd(), "./output/MissingValueRateOECD.html"))
getwd()
saveWidget(plotly_oecd, file=paste0( getwd(), "output/MissingValueRateOECD.html"))
as.data.frame(table(ddExtra$Government_Type)) %>%
arrange(Freq) %>%  # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Var1=factor(Var1, levels=Var1)) %>% # This trick update the factor levels
ggplot() +
geom_col(aes(x=Freq, y=Var1)) +
theme(axis.text.x = element_text(angle = 90)) +
labs(title="Gov Type Count",
y="")
groups <- filtered_joined %>%
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.))) %>%
mutate(text = paste0("iso_code: ", iso_code, "\n", "rate: ", rate, "\n", "column: ", col_name)) # new column: text for tooltip:
# reordering heatmap
# https://community.rstudio.com/t/ggplot2-heatmap-not-arranging-from-highest-to-lowest/22119
p <- ggplot(groups, aes(x= reorder(iso_code, rate), y= reorder(col_name, rate), fill= rate)) +
geom_tile() +
theme(axis.text.x = element_text(size=4, angle = 90),
axis.text.y = element_text(size=5)) +
labs(#title="Gov Type Count",
y="", x="")
pp <- ggplotly(p, tooltip="text")
saveWidget(pp, file=paste0( getwd(), "MissingValueRate.html"))
pp
groups_brics <- filtered_joined %>%
filter(Country_Clasification == 'BRICS') %>%
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.))) %>%
mutate(text = paste0("iso_code: ", iso_code, "\n", "rate: ", rate, "\n", "column: ", col_name)) # new column: text for tooltip:
plot_groups_brics <- ggplot(groups_brics, aes(x= reorder(iso_code, rate), y= reorder(col_name, rate), fill= rate)) +
geom_tile() +
theme(axis.text.x = element_text(size=4, angle = 90),
axis.text.y = element_text(size=5)) +
labs(#title="Gov Type Count",
y="", x="")
plot_groups_brics
heatmap_maker(Country_Clasification == 'BRICS')
heatmap_maker <- function(criteria){
g <- filtered_joined %>%
filter(criteria) %>%
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.))) %>%
mutate(text = paste0("iso_code: ", iso_code, "\n", "rate: ", rate, "\n", "column: ", col_name)) # new column: text for tooltip:
p <- ggplot(g, aes(x= reorder(iso_code, rate), y= reorder(col_name, rate), fill= rate)) +
geom_tile() +
theme(axis.text.x = element_text(size=4, angle = 90),
axis.text.y = element_text(size=5)) +
labs( y="", x="")
return(p)
}
heatmap_maker(Country_Clasification == 'BRICS')
heatmap_maker(`Country_Clasification == 'BRICS'`)
heatmap_maker("Country_Clasification == 'BRICS'")
heatmap_maker(eval(parse(Country_Clasification == 'BRICS')))
heatmap_maker <- function(...){
F <- quos(...)
g <- filtered_joined %>%
filter(!!!F) %>%
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.))) %>%
mutate(text = paste0("iso_code: ", iso_code, "\n", "rate: ", rate, "\n", "column: ", col_name)) # new column: text for tooltip:
p <- ggplot(g, aes(x= reorder(iso_code, rate), y= reorder(col_name, rate), fill= rate)) +
geom_tile() +
theme(axis.text.x = element_text(size=4, angle = 90),
axis.text.y = element_text(size=5)) +
labs( y="", x="")
return(p)
}
heatmap_maker(Country_Clasification == 'BRICS')
heatmap_maker(Country_Clasification == 'BRICS')
heatmap_maker(Country_Clasification == 'OECD')
heatmap_maker(Development_Status == 'Developed economies')
heatmap_maker(Development_Status == 'Developing economies')
save_plotly(heatmap_maker(Country_Clasification == 'BRICS'),
"BRICS.html")
save_plotly <- function(plot, filename){
p <- ggplotly(plot, tooltip="text")
return(saveWidget(p, file=paste0( getwd(), filename)))
}
save_plotly(heatmap_maker(Country_Clasification == 'BRICS'),
"BRICS.html")
save_plotly <- function(plot, filename){
p <- ggplotly(plot, tooltip="text")
return(saveWidget(p, file=paste0(filename)))
}
save_plotly(heatmap_maker(Country_Clasification == 'BRICS'),
"BRICS.html")
plotly_brics <- ggplotly(plot_brics, tooltip="text")
saveWidget(plotly_brics, file=paste0("BRICS.html"))
plot_brics <- heatmap_maker(Country_Clasification == 'BRICS')
plotly_brics <- ggplotly(plot_brics, tooltip="text")
saveWidget(plotly_brics, file=paste0("BRICS.html"))
saveWidget(plotly_brics, file=paste0("BRICS.html"))
plotly_brics <- ggplotly(plot_brics, tooltip="text")
saveWidget(plotly_brics, file="BRICS.html")
plot_brics <- heatmap_maker(Country_Clasification == 'BRICS')
plotly_brics <- ggplotly(plot_brics, tooltip="text")
saveWidget(plotly_brics, file="output/missing_value_heatmap/BRICS.html")
plot_oecd <- heatmap_maker(Country_Clasification == 'OECD')
plotly_oecd <- ggplotly(plot_oecd, tooltip="text")
saveWidget(plotly_oecd, file="OECD.html")
heatmap_maker(location != "1111")
plot_all <- heatmap_maker(location != "1111") #just to enclude everyone
plotly_all <- ggplotly(plot_all, tooltip="text")
saveWidget(plotly_all, file="all.html")
View(joined)
joined %>%
filter(continent == 'Europe')
library(dplyr) # for data cleaning
load(file="output/joined_data_by_isocode.RData")
View(joined)
View(ddExtra)
# Prepocessing
# select only EU countries
joined %>%
filter(continent == 'Europe')
joined %>%
filter(continent %in% selected_eu)
selected_eu <- c('Germany', 'England', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Danmark', 'Italy', 'Netherlands',
'Ireland', 'Switzerland','Austria')
joined %>%
filter(continent %in% selected_eu)
joined %>%
filter(COUNTRY %in% selected_eu)
eu <- joined %>%
filter(COUNTRY %in% selected_eu)
unique(eu$COUNTRY)
selected_eu <- c('Germany', 'United Kingdom', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Danmark', 'Italy', 'Netherlands',
'Ireland', 'Switzerland','Austria')
eu <- joined %>%
filter(COUNTRY %in% selected_eu)
unique(eu$COUNTRY)
# Prepocessing
# select only EU countries
selected_eu <- c('Germany', 'United Kingdom', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Denmark', 'Italy', 'Netherlands',
'Ireland', 'Switzerland','Austria')
eu <- joined %>%
filter(COUNTRY %in% selected_eu)
unique(eu$COUNTRY)
selected_eu <- c('Germany', 'United Kingdom', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Denmark', 'Italy', 'Netherlands')
#'Ireland', 'Switzerland','Austria')
eu <- joined %>%
filter(COUNTRY %in% selected_eu)
unique(eu$COUNTRY)
View(joined)
View(eu)
filter(eu, hospital_beds_per_thousand > 0)
Veiw(filter(eu, hospital_beds_per_thousand > 0))
View(filter(eu, hospital_beds_per_thousand > 0))
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(eu, hospital_beds_per_thousand > 0)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0)
eu$COUNTRY
unique(eu$COUNTRY)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0)
fitler(date == 2020-11-31)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
fitler(date == 2020-11-31)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == 2020-11-31)
View(eu)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0)
eu$date
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == "2020-11-31")
class(eu$date)
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date > "2020-11-31")
selected_eu <- c('Germany', 'United Kingdom', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Denmark', 'Italy', 'Netherlands')
#'Ireland', 'Switzerland','Austria'
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date > "2020-11-31")
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date > as.Date("2020-11-31"))
as.Date("2020-11-31")
#'Ireland', 'Switzerland','Austria'
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date > as.Date("2020-11-31", format = "%Y-%m-%d"))
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == as.Date("2020-11-31", format = "%Y-%m-%d"))
View(eu)
filter(joined, date == as.Date("2020-11-31", format = "%Y-%m-%d"))
View(filter(joined, date == as.Date("2020-11-31", format = "%Y-%m-%d")))
View(filter(joined, date == as.Date("2020-10-31", format = "%Y-%m-%d")))
eu <- joined %>%
filter(COUNTRY %in% selected_eu) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == as.Date("2020-10-31", format = "%Y-%m-%d"))
select(eu, one_of(selected_col))
selected_col <- c('total_cases_per_million', 'total_cases_per_million', 'gdp_per_capita', 'hospital_beds_per_thousand')
select(eu, one_of(selected_col))
selected_col <- c('COUNTRY','total_cases_per_million', 'total_cases_per_million', 'gdp_per_capita', 'hospital_beds_per_thousand')
select(one_of(selected_col))
selected_col <- c('location','total_cases_per_million', 'total_cases_per_million', 'gdp_per_capita', 'hospital_beds_per_thousand')
select(one_of(selected_col))
select(eu, one_of(selected_col))
eu <- joined %>%
filter(COUNTRY %in% selected_countries) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == as.Date("2020-10-31", format = "%Y-%m-%d")) %>%
select(one_of(selected_col))
selected_countries <- c('Germany', 'United Kingdom', 'France', 'Spain', 'Portugal',
'Finland', 'Norway', 'Denmark', 'Italy', 'Netherlands')
#'Ireland', 'Switzerland','Austria'
selected_col <- c('location','total_cases_per_million', 'total_deaths_per_million', 'total_cases_per_million', 'gdp_per_capita', 'hospital_beds_per_thousand')
eu <- joined %>%
filter(location %in% selected_countries) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == as.Date("2020-10-31", format = "%Y-%m-%d")) %>%
select(one_of(selected_col))
View(joined)
selected_col <- c('location','total_cases_per_million', 'total_deaths_per_million', 'total_cases_per_million',
'gdp_per_capita', 'hospital_beds_per_thousand', 'Government_Type')
eu <- joined %>%
filter(location %in% selected_countries) %>%
filter(hospital_beds_per_thousand > 0) %>% # just to make sure
filter(date == as.Date("2020-10-31", format = "%Y-%m-%d")) %>%
select(one_of(selected_col))
eu
install.packages(daisy)
library(daisy)
?daisy
??daisy
install.packages("cluster")
glimpse(eu)
gower_dist <- daisy(eu[, -1],
metric = "gower",
type = list(logratio = 3))
library(cluster)
gower_dist <- daisy(eu[, -1],
metric = "gower",
type = list(logratio = 3))
summary(gower_dist)
gower_mat <- as.matrix(gower_dist)
gower_mat
eu[
which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
eu[
which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
hclust_avg <- hclust(gower_dist, method = 'average')
plot(hclust_avg)
install.packages("dendextend")
lables(hclust_avg)
lables(plot(hclust_avg))
dend <- as.dendrogram(hclust_avg)
labels(dend)
eu$location
names(eu$location)
?SparseArray
?order
labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
dend2 <- dend
#hardcode
labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
hclust_avg <- hclust(gower_dist, method = 'average')
plot(hclust_avg)
dend <- as.dendrogram(hclust_avg)
dend2 <- dend
#hardcode
labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
dend2
labels(dend2)
labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
dendextend::labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(dend2)
plot(dend)
dendextend::labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(dend2)
cut_avg <- cutree(dend2, k = 3)
plot(dend2)
rect.hclust(dend2 , k = 3, border = 2:6)
abline(h = 3, col = 'red')
cut_avg <- cutree(dend2, k = 2)
plot(dend2)
rect.hclust(dend2 , k = 2, border = 2:6)
abline(h = 3, col = 'red')
cut_avg <- cutree(dend2, k = 2)
plot(dend2)
rect.hclust(dend2 , k = 2, border = 2:6)
abline(h = 2, col = 'red')
cut_avg <- cutree(dend2, k = 2)
plot(dend2)
rect.hclust(dend2 , k = 2, border = 2:6)
abline(h = 2, col = 'red')
cut_avg2 <- cutree(dend2, k = 2)
plot(dend2)
rect.hclust(dend2 , k = 2, border = 2:6)
abline(h = 2, col = 'red')
cut_avg <- cutree(dend2, k = 0.4)
plot(dend2)
rect.hclust(dend2 , k = 0.4, border = 2:6)
abline(h =0.4, col = 'red')
plot(dend2)
rect.hclust(dend2 , k = 0.4)
abline(h =0.4, col = 'red')
cut_avg <- cutree(dend2, k = 0.4)
plot(dend2)
rect.hclust(dend2 , k = 0.4 ,border = 3)
abline(h =0.4, col = 'red')
plot(dend2)
rect.hclust(dend2 , k = 0.4 ,border = "red")
abline(h =0.4, col = 'red')
plot(dend2)
rect.hclust(dend2 , k = 3 ,border = "red")
abline(h =0.4, col = 'red')
plot(dend2)
rect.hclust(dend2 , k = 1 ,border = "red")
abline(h =0.4, col = 'red')
abline(h =0.4, col = 'pink')
abline(h =0.4, col = 'hotpink')
rect.hclust(dend2 , k = 2 ,border = "red")
rect.hclust(dend2 , k = 2 ,border = "red")
cut_avg <- cutree(dend2, k = 3)
cut_avg <- cutree(hclust_avg, k = 3)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = "red")
abline(h =0.4, col = 'hotpink')
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'hotpink')
plot(dend2)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'hotpink')
abline(h =0.4, col = 'yellow')
dend <- plot(hclust_avg)
dend2 <- dend
#hardcode
dendextend::labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(dend2)
dend <- as.dendrogram(hclust_avg)
dend2 <- dend
#hardcode
dendextend::labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
#dealing with lables
#https://stackoverflow.com/questions/32720128/labels-in-dendrogram-in-r
dend <- as.dendrogram(hclust_avg)
dend2 <- dend
#hardcode
dendextend::labels(dend2) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
cut_avg <- cutree(hclust_avg, k = 3)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
plot(hclust_avg)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
plot(dend2)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
labels(hclust_avg)
dend <- color_branches(hclust_avg, k = 3)
plot(dend)
dend <- dendextend::color_branches(hclust_avg, k = 3)
plot(dend)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
dend <- dendextend::color_branches(hclust_avg, k = 3)
plot(dend)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
dend <- dendextend::color_branches(hclust_avg, k = 3)
plot(dend)
dend <- dendextend::color_branches(as.dendrogram(hclust_avg), k = 3)
plot(dend)
dend <- dendextend::color_branches(as.dendrogram(hclust_avg), k = 3)
dendextend::labels(dend) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(dend)
cut_avg <- cutree(hclust_avg, k = 3)
plot(hclust_avg)
rect.hclust(hclust_avg , k = 3 ,border = 2:6)
abline(h =0.4, col = 'yellow')
dend <- dendextend::color_branches(as.dendrogram(hclust_avg), k = 3)
dendextend::labels(dend) <- c("France", "Portugal", "Italy", "Germany", "Findland", "Denmark", "Norway", "Netherlands", "Spain", "United Kingdom")
plot(dend)
load(file="output/joined_data_by_isocode.RData")
View(joined)
View(ddExtra)
sapply(joined, class)
# location = international is all NA
filtered_joined <- joined %>%
filter(location != "International" & location != "World")
# checking NA count in each column -------------------------
missing_value_rate_table  <- function(your_dataframe) {
missing_value_rate <- colMeans(is.na(your_dataframe))*100
df <- data.frame(missing_value_rate)
# set index as column
df <- cbind(col_name = rownames(df), df)
rownames(df) <- 1:nrow(df)
m <- df %>%
rename(rate = missing_value_rate) %>%
mutate(rate= round(rate, 2))%>%
arrange(desc(rate))
return(m)
}
heatmap_maker(location != "1111")
# library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(htmlwidgets)
heatmap_maker(location != "1111")
joined_missing_value <- missing_value_rate_table(joined)
View(joined_missing_value)
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
heatmap_maker_data <- function(...){
# https://stackoverflow.com/questions/45134317/how-to-filter-a-data-frame-programmatically-with-dplyr-and-tidy-evaluation
F <- quos(...) #quos captures ... as a list, without evaluating the arguments.
g <- filtered_joined %>%
filter(!!!F) %>%  #!!! splices and unquotes the arguments for evaluation
group_by(iso_code) %>%
group_modify(~tibble(missing_value_rate_table(.)))
return(g)
}
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
Viewplot_all_data)
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
View(plot_all_data)
heatmap_maker_data <- function(...){
# https://stackoverflow.com/questions/45134317/how-to-filter-a-data-frame-programmatically-with-dplyr-and-tidy-evaluation
F <- quos(...) #quos captures ... as a list, without evaluating the arguments.
g <- filtered_joined %>%
filter(!!!F) %>%  #!!! splices and unquotes the arguments for evaluation
group_by(iso_code, COUNTRY) %>%
group_modify(~tibble(missing_value_rate_table(.)))
return(g)
}
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
View(plot_all_data)
heatmap_maker_data <- function(...){
# https://stackoverflow.com/questions/45134317/how-to-filter-a-data-frame-programmatically-with-dplyr-and-tidy-evaluation
F <- quos(...) #quos captures ... as a list, without evaluating the arguments.
g <- filtered_joined %>%
filter(!!!F) %>%  #!!! splices and unquotes the arguments for evaluation
group_by(iso_code, COUNTRY, Continent) %>%
group_modify(~tibble(missing_value_rate_table(.)))
return(g)
}
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
View(plot_all_data)
filter(plot_all_data, !is.na(COUNTRY))
plot_all_data
plot_all_data <- heatmap_maker_data(location != "1111") #just to include everyone
View(plot_all_data)
write.csv(filter(plot_all_data, !is.na(COUNTRY)) ,'output/for_d3/missing_value_rate_filteredNA.csv')
names(plot_all_data) <- tolower(names(plot_all_data))
View(plot_all_data)
write.csv(filter(plot_all_data, !is.na(COUNTRY)) ,'output/for_d3/missing_value_rate_filteredNA.csv')
write.csv(filter(plot_all_data, !is.na(country)) ,'output/for_d3/missing_value_rate_filteredNA.csv')
write.csv(filter(plot_all_data, !is.na(country)) ,'output/for_d3/missing_value_rate_filteredNA.csv')
